

//All the x and z stuff here are just letters. the for loop in gridsystem is the thing that defines what number these are.
//Then, converting the grid to world position is where these x and z numebrs become actual vector points
using System;

//explanation on what IEquatable is later
public struct GridPosition : IEquatable<GridPosition>
{
    public int x;
    public int z;
    
    

    //the following 2 functions are us overriding the equals and not equals function for this struct which is not automatically activated because this is not a mono struct
    public static bool operator == (GridPosition a, GridPosition b)
    {
        return a.x == b.x && a.z == b.z;
    }
    public static bool operator != (GridPosition a, GridPosition b)
    {
        return !(a == b);
    }
    //the following 2 functions are a continuation of the above 2 and were generated by visual studio
    public override bool Equals(object obj)
    {
        return obj is GridPosition position &&
               x == position.x &&
               z == position.z;
    }
    public static GridPosition operator + (GridPosition a, GridPosition b)
    {
        return new GridPosition(a.x + b.x, a.z + b.z);
    }
    public static GridPosition operator - (GridPosition a, GridPosition b)
    {
        return new GridPosition(a.x - b.x, a.z - b.z);
    }
    public GridPosition(int x, int z)
    {
        this.x = x;
        this.z = z;
    }
    public override int GetHashCode()
    {
        return HashCode.Combine(x, z);
    }
    public override string ToString()
    {
        return "x: " + x + "; z: " + z;
    }
    //generated by visual studio to make IEquatable work.
    public bool Equals(GridPosition other)
    {
        return this == other;
    }

}